---
  apiVersion: opentelemetry.io/v1beta1
  kind: OpenTelemetryCollector
  metadata:
    name: otel-agent
    annotations:
      prometheus.io/scrape: "false"
  spec:
    mode: daemonset
    image: otel/opentelemetry-collector-contrib:latest
    serviceAccount: otel-collector
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    config:
      receivers:
        hostmetrics:
          collection_interval: 15s
          scrapers:
            cpu: {}
            disk: {}
            load: {}
            filesystem:
              exclude_mount_points:
                mount_points:
                  - /dev/*
                  - /proc/*
                  - /sys/*
                  - /run/k3s/containerd/*
                  - /var/lib/docker/*
                  - /var/lib/kubelet/*
                  - /snap/*
                match_type: regexp
              exclude_fs_types:
                fs_types:
                  - autofs
                  - binfmt_misc
                  - bpf
                  - cgroup2
                  - configfs
                  - debugfs
                  - devpts
                  - devtmpfs
                  - fusectl
                  - hugetlbfs
                  - iso9660
                  - mqueue
                  - nsfs
                  - overlay
                  - proc
                  - procfs
                  - pstore
                  - rpc_pipefs
                  - securityfs
                  - selinuxfs
                  - squashfs
                  - sysfs
                  - tracefs
                match_type: strict
          network:
            memory: {}
            network: {}
            paging: {}
            processes: {}
            process: {}
            system: {}
        kubeletstats:
          collection_interval: 15s
          auth_type: serviceAccount
          endpoint: ${env:K8S_NODE_NAME}:10250
          insecure_skip_verify: true
        prometheus:
          config:
            scrape_configs:
            - job_name: 'kubernetes-pods'
              kubernetes_sd_configs:
              - role: pod
                namespaces:
                  names:
                    - observability
              relabel_configs:
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                regex: "true"
                action: keep
              - source_labels: [__meta_kubernetes_pod_label_app]
                regex: grafana|loki|mimir|otel-agent|otel-gateway|promtail|tempo
                action: keep
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                target_label: kubernetes_namespace
              - source_labels: [__meta_kubernetes_pod_name]
                target_label: kubernetes_pod_name
              - source_labels: [__meta_kubernetes_pod_node_name]
                target_label: kubernetes_node
            - job_name: 'kubernetes-node-metrics'
              scrape_interval: 15s
              scheme: https
              kubernetes_sd_configs:
                - role: node
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              relabel_configs:
                - action: labelmap
                  regex: __meta_kubernetes_node_label_(.+)
                - target_label: __address__
                  replacement: kubernetes.default.svc:443
                - source_labels: [__meta_kubernetes_node_name]
                  regex: (.+)
                  target_label: __metrics_path__
                  replacement: /api/v1/nodes/$1/proxy/metrics
      processors:
        batch:
          timeout: 10s
        memory_limiter:
          check_interval: 5s
          limit_mib: 1000
        resourcedetection:
          detectors: [env, system, k8snode]
          system:
            hostname_sources: [os]
        k8sattributes:
          auth_type: "serviceAccount"
          filter:
            node_from_env_var: K8S_NODE_NAME
          extract:
            metadata:
              - "k8s.namespace.name"
              - "k8s.deployment.name"
              - "k8s.statefulset.name"
              - "k8s.daemonset.name"
              - "k8s.cronjob.name"
              - "k8s.job.name"
              - "k8s.node.name"
              - "k8s.pod.name"
              - "k8s.pod.uid"
              - "k8s.pod.start_time"
            labels:
              - tag_name: app
                key: app
                from: pod
              - tag_name: component
                key: component
                from: pod
              - tag_name: name
                key: name
                from: pod
              - tag_name: app.kubernetes.io/name
                key: app.kubernetes.io/name
                from: pod
              - tag_name: app.kubernetes.io/component
                key: app.kubernetes.io/component
                from: pod
              - tag_name: app.kubernetes.io/instance
                key: app.kubernetes.io/instance
                from: pod
              - tag_name: app.kubernetes.io/part-of
                key: app.kubernetes.io/part-of
                from: pod
              - tag_name: node.role.control-plane
                key: node-role.kubernetes.io/control-plane
                from: node
              - tag_name: node.role.master
                key: node-role.kubernetes.io/master
                from: node
              - tag_name: node.role.worker
                key: node-role.kubernetes.io/worker
                from: node
              - tag_name: node.ramtype
                key: ramtype
                from: node
              - tag_name: kubernetes.io/arch
                key: kubernetes.io/arch
                from: node
              - tag_name: kubernetes.io/os
                key: kubernetes.io/os
                from: node
            annotations:
              - tag_name: $$1
                key_regex: (.*)
                from: pod
          passthrough: false
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.ip
          - sources:
            - from: resource_attribute
              name: k8s.pod.uid
          - sources:
            - from: connection
        transform:
          metric_statements:
            - context: resource
              statements:
                - set(attributes["service.name"], attributes["app"]) where attributes["app"] != nil
                - set(attributes["service.component"], attributes["component"]) where attributes["component"] != nil
                - set(attributes["service.instance"], attributes["name"]) where attributes["name"] != nil
      exporters:
        otlp:
          endpoint: otel-gateway-collector:4317
          tls:
            insecure: true
      service:
        pipelines:
          metrics:
            receivers: [hostmetrics, kubeletstats, prometheus]
            processors: [batch, memory_limiter, resourcedetection, k8sattributes, transform]
            exporters: [otlp]