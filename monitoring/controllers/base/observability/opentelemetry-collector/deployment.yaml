apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector
  namespace: observability
spec:
  image: otel/opentelemetry-collector-contrib:latest 
  mode: daemonset
  env:
  - name: K8S_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  config: 
    receivers:
      # for getting stats from kubelet service
      kubeletstats:
        collection_interval: 20s
        auth_type: "serviceAccount"
        endpoint: "https://${env:K8S_NODE_NAME}:10250"
        insecure_skip_verify: true

      k8sattributes:
        auth_type: 'serviceAccount'
        extract:
          metadata: # extracted from the pod
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.pod.start_time
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.node.name
          annotations:
            # Extracts the value of a pod annotation with key `annotation-one` and inserts it as a resource attribute with key `a1`
            - tag_name: a1
              key: annotation-one
              from: pod
            # Extracts the value of a namespaces annotation with key `annotation-two` with regexp and inserts it as a resource  with key `a2`
            - tag_name: a2
              key: annotation-two
              regex: field=(?P<value>.+)
              from: namespace
          labels:
            # Extracts the value of a namespaces label with key `label1` and inserts it as a resource attribute with key `l1`
            - tag_name: l1
              key: label1
              from: namespace
            # Extracts the value of a pod label with key `label2` with regexp and inserts it as a resource attribute with key `l2`
            - tag_name: l2
              key: label2
              regex: field=(?P<value>.+)
              from: pod
        pod_association: # How to associate the data to a pod (order matters)
          - sources: # First try to use the value of the resource attribute k8s.pod.ip
              - from: resource_attribute
                name: k8s.pod.ip
          - sources: # Then try to use the value of the resource attribute k8s.pod.uid
              - from: resource_attribute
                name: k8s.pod.uid
          - sources: # If neither of those work, use the request's connection to get the pod IP.
              - from: connection
      # For application metrics (Prometheus format)
      prometheus:
        config:
          scrape_configs:
            - job_name: 'kubernetes-pods'
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
            - job_name: 'ceph'
              scrape_interval: 15s
              static_configs:
                - targets: ['objectstore.tommahs.nl']
      
      # For traces
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

    processors:
      batch: {}
      memory_limiter:
        check_interval: 1s
        limit_mib: 1000
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.container.name

    exporters:
      # For metrics to Mimir
      prometheusremotewrite:
        endpoint: "http://mimir-distributor.observability.svc.cluster.local:8080/api/v1/push"
        tls:
          insecure: true
      
      # For logs to Loki
      otlphttp:
        endpoint: "http://loki-gateway.observability.svc.cluster.local:3100/otlp/v1/logs"
      # For traces to Tempo
      otlp:
        endpoint: "http://tempo-distributor.observability.svc.cluster.local:4317"
        tls:
          insecure: true

    service:
      pipelines:
        metrics:
          receivers: [kubeletstats, prometheus]
          processors: [memory_limiter, k8sattributes, batch]
          exporters: [prometheusremotewrite]
        logs:
          receivers: [filelog]
          processors: [memory_limiter, k8sattributes, batch]
          exporters: [otlphttp]
        traces:
          receivers: [otlp]
          processors: [memory_limiter, k8sattributes, batch]
          exporters: [otlp]